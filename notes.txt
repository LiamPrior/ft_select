
////////////isatty\\\\\\\\\\\/////////ttyname\\\\\\\\\\
#include <unistd.h>

DEFF:Get the name of ofa associated terminal from the file descriptor!

Isatty: int isatty(int fd);
Ttyname: char *ttyname(int fd);

description: Isatty:
		   : These functions operate on file descriptors for terminal type devices;
		   : The isatty determines if the file desciptor fd refers to a valid terminal type device;
		   : WILL FAIL if The file associated with fd is not a terminal;
		   : Returns 1 success 0 on failure;

description: Ttyname:
		   : The ttyname() function gets the related device name of a file descriptor for which isatty() is true;
		   : Function returns the name stored in a static buffer which will be overwritten on subsequent calls

///////////ttyslot\\\\\\\\\\\
#include <unistd.h>

DEFF: Find the slot of the current user's terminal in some file;

int ttyslot(void);

description: ttyslot:
           : The legacy function ttyslot() returns the index of the current user's entry in some file
           : If successful, this function returns the slot number, Else -1

////////ioctl\\\\\\\
#include <sys/ioctl.h>

DEFF: Control device. Input, Output operations.

int ioctl(int fildes, unsigned long request, ...);

description: ioctl;
           : The ioctl() function manipulates the underlying device parameters of special files;
           : In particular many operating characteristics of character special files (e.g. terminals) may be controlled with ioctl() requests;
           : The argument fildes must be an open file descriptor;
           : An  ioctl request has encoded in it whether the argument is an ``in'' parameter or ``out'' parameter, and the size of the argument argp in bytes;
           : If an error has occurred, a value of -1 is returned and errno is set to indicate the error;

struct winsize {
	unsigned short	ws_row;		/* rows, in characters */
	unsigned short	ws_col;		/* columns, in characters */
	unsigned short	ws_xpixel;	/* horizontal size, pixels */
	unsigned short	ws_ypixel;	/* vertical size, pixels */
};

///////////getenv\\\\\\\\\\\
#include <stdlib.h>

DEFF: environment variable functions

char *getenv(const char *name);

description: getenv:
           : Set, unset and fetch environment variables from the host environment list;
           : Obtains the current value of the environment variable, name;
           : function returns the value of the environment variable as a NUL-terminated string;
           : If the variable name is not in the current environment, NULL is returned;

/////////tcsetattr\\\\\\\\\\\\//////////tcgetattr\\\\\\\\\\\\\\\\\\\
#include <termios.h>

DEFF: manipulating the termios structure used to control the general terminal interface.
DEFF: TERMIOS: Functions are restricted from background processes.
             : In all of the functions, although fildes is an open file descriptor, the functions affect the underlying terminal file, not just the open file description that is associated with the particular file descriptor;

int tcsetattr(int fildes, int optional_actions, const struct termios *termios_p);
int tcgetattr(int fildes, struct termios *termios_p);

description: tcgetattr(), and tcsetattr() functions are provided for getting and setting the termios structure;
tcgetattr  : Function copies the parameters associated with the terminal referenced by fildes in the termios structure referenced by termios_p;
tcgetattr  : This function is allowed from a background process, however, the terminal attributes may be subsequently changed by a foreground process;
tcsetattr  : Function sets the parameters associated with the terminal from the termios structure referenced by termios_p;
tcsetattr  : The optional_actions field is created by or'ing the following values, as specified in the include file <termios.h>.

#include <termios.h>

struct termios {
	tcflag_t c_iflag; /* input modes */
	tcflag_t c_oflag; /* output modes */
	tcflag_t c_cflag; /* control modes */
	tcflag_t c_lflag; /* local modes */
	cc_t c_cc[NCCS]; /* special charactors */
	speed_t c_ispeed;
	speed_t c_ospeed;
};

The canonical mode puts the terminal in "interactive" mode: a read on the standart input will return its result either when the [ENTER] key is pressed,
but with each key pressed (or more depending on the value of VMIN).
This allows in particular to be able to launch an action with each pressed key: management of the arrows for example.
VTIME allows when it has a return of read all the n delay.

TCSANOW: the change occurs immediately
TCSADRAIN: the exchange OCCURS After All output written to  fd  has-been Transmitted. This function should be used when changing parameters that affect output.
TCSAFLUSH: the exchange OCCURS After All output written to the object Referred By  fd  has-been Transmitted, and all input That has-been received but not read will be discarded before the change is made.


/////////tgetent\\\\\\\\\/////////getflag\\\\\\\\\\//////////tgetnum\\\\\\\\\////////tgetstr\\\\\\\\/////////tgoto\\\\\\\\\\////////////tputs\\\\\\\\\\\\
#include <curses.h>
#include <term.h>

DEFF: Direct curses interface to the terminfo capability database;
    : These routines are included as a conversion aid for programs that use the termcap library;
    : Their parameters are the same and the routines are emulated using the terminfo database;
    : Thus, they can only be used to query the capabilities of entries for which a terminfo entry has been compiled.
DEFF: TERMINFO:

int tgetent(char *bp, const char *name);
int tgetflag(char *id);
int tgetnum(char *id);
char *tgetstr(char *id, char **area);
char *tgoto(const char *cap, int col, int row);
int tputs(const char *str, int affcnt, int (*putc)(int));
.
The tgetent routine loads the entry for name.  It returns 1 on success, 0 if there is no such entry, and -1 if the terminfo database could not be found. The emulation ignores the buffer pointer bp.

The tgetflag routine gets the boolean entry for id, or zero if it is not available;

The tgetnum routine gets the numeric entry for id, or -1 if it is not available;

The tgetstr routine returns the string entry for id, or zero if it is not available; The return value will also be copied to the buffer pointed to by area, and the area value will be updated to point past the null ending this value;

Use tputs to output the returned string;

The tgoto routine instantiates the parameters into the given capability.  The output from this routine is to be passed to tputs.

The tputs routine is described on the curs_terminfo(3X) manual page.  It can retrieve capabilities by either termcap or terminfo name.

open
close
write
malloc
free
read
exit
signal
